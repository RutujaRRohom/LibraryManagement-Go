// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import domain "library_management/domain"
import mock "github.com/stretchr/testify/mock"

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

// AddUserIssuedBook provides a mock function with given fields: ctx, UserID, BookID
func (_m *Storer) AddUserIssuedBook(ctx context.Context, UserID int, BookID int) error {
	ret := _m.Called(ctx, UserID, BookID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, UserID, BookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddingBook provides a mock function with given fields: ctx, add
func (_m *Storer) AddingBook(ctx context.Context, add domain.AddBookResponse) (int, error) {
	ret := _m.Called(ctx, add)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, domain.AddBookResponse) int); ok {
		r0 = rf(ctx, add)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.AddBookResponse) error); ok {
		r1 = rf(ctx, add)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, users
func (_m *Storer) CreateUser(ctx context.Context, users domain.Users) error {
	ret := _m.Called(ctx, users)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Users) error); ok {
		r0 = rf(ctx, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBooksFromDb provides a mock function with given fields: ctx
func (_m *Storer) GetAllBooksFromDb(ctx context.Context) ([]domain.GetAllBooksResponse, error) {
	ret := _m.Called(ctx)

	var r0 []domain.GetAllBooksResponse
	if rf, ok := ret.Get(0).(func(context.Context) []domain.GetAllBooksResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.GetAllBooksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookActivity provides a mock function with given fields: ctx
func (_m *Storer) GetBookActivity(ctx context.Context) ([]domain.GetBooksActivityResponse, error) {
	ret := _m.Called(ctx)

	var r0 []domain.GetBooksActivityResponse
	if rf, ok := ret.Get(0).(func(context.Context) []domain.GetBooksActivityResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.GetBooksActivityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookById provides a mock function with given fields: ctx, BookID
func (_m *Storer) GetBookById(ctx context.Context, BookID int) (domain.GetBookById, error) {
	ret := _m.Called(ctx, BookID)

	var r0 domain.GetBookById
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.GetBookById); ok {
		r0 = rf(ctx, BookID)
	} else {
		r0 = ret.Get(0).(domain.GetBookById)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, BookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBooks provides a mock function with given fields: ctx, email
func (_m *Storer) GetUserBooks(ctx context.Context, email string) ([]domain.GetBooksResponse, error) {
	ret := _m.Called(ctx, email)

	var r0 []domain.GetBooksResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.GetBooksResponse); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.GetBooksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, emailID, prefix
func (_m *Storer) GetUsers(ctx context.Context, emailID string, prefix string) ([]domain.GetUsersResponse, error) {
	ret := _m.Called(ctx, emailID, prefix)

	var r0 []domain.GetUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []domain.GetUsersResponse); ok {
		r0 = rf(ctx, emailID, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.GetUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, emailID, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssuedBook provides a mock function with given fields: ctx, UserID, Userbooking
func (_m *Storer) IssuedBook(ctx context.Context, UserID int, Userbooking domain.IssueBookRequest) (domain.IssuedBookResponse, error) {
	ret := _m.Called(ctx, UserID, Userbooking)

	var r0 domain.IssuedBookResponse
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.IssueBookRequest) domain.IssuedBookResponse); ok {
		r0 = rf(ctx, UserID, Userbooking)
	} else {
		r0 = ret.Get(0).(domain.IssuedBookResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, domain.IssueBookRequest) error); ok {
		r1 = rf(ctx, UserID, Userbooking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) LoginUser(_a0 context.Context, _a1 string, _a2 string) (string, int, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, string) int); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReturnBooks provides a mock function with given fields: ctx, UserID, book
func (_m *Storer) ReturnBooks(ctx context.Context, UserID int, book domain.ReturnBookRequest) error {
	ret := _m.Called(ctx, UserID, book)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.ReturnBookRequest) error); ok {
		r0 = rf(ctx, UserID, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBookStatus provides a mock function with given fields: ctx, book
func (_m *Storer) UpdateBookStatus(ctx context.Context, book domain.GetBookById) error {
	ret := _m.Called(ctx, book)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetBookById) error); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, email, pass
func (_m *Storer) UpdatePassword(ctx context.Context, email string, pass domain.ResetPasswordRequest) error {
	ret := _m.Called(ctx, email, pass)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.ResetPasswordRequest) error); ok {
		r0 = rf(ctx, email, pass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Updatename provides a mock function with given fields: ctx, email, name
func (_m *Storer) Updatename(ctx context.Context, email string, name domain.ResetNameRequest) error {
	ret := _m.Called(ctx, email, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.ResetNameRequest) error); ok {
		r0 = rf(ctx, email, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
